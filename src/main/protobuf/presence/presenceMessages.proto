/*
 * Copyright (C) Convergence Labs, Inc
 *
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */
syntax = "proto3";

package com.convergencelabs.convergence.proto.presence;

import "google/protobuf/struct.proto";

import "scalapb/scalapb.proto";

import "identity/identityMessages.proto";
import "presence/presenceData.proto";

message PresenceRequestMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Request";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  repeated DomainUserIdData users = 1;
}

message PresenceResponseMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Response";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  repeated UserPresenceData userPresences = 1;
}

message SubscribePresenceRequestMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Request";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  repeated DomainUserIdData users = 1;
}

message SubscribePresenceResponseMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Response";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  repeated UserPresenceData userPresences = 1;
}

message UnsubscribePresenceMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  repeated DomainUserIdData users = 1;
}

message PresenceSetStateMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  map<string, google.protobuf.Value> state = 1;
}

message PresenceRemoveStateMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  repeated string keys = 1;
}

message PresenceClearStateMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";
}

message PresenceStateSetMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  DomainUserIdData user = 1;
  map<string, google.protobuf.Value> state = 2;
}

message PresenceStateRemovedMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  DomainUserIdData user = 1;
  repeated string keys = 2;
}

message PresenceStateClearedMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  DomainUserIdData user = 1;
}

message PresenceAvailabilityChangedMessage {
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Normal";
  option (scalapb.message).extends = "com.convergencelabs.convergence.proto.Presence";

  DomainUserIdData user = 1;
  bool available = 2;
}