syntax = "proto3";

package convergence.protocol;

import "google/protobuf/wrappers.proto";
import "scalapb/scalapb.proto";

message UserLookUpMessage {
  option (scalapb.message).extends = "convergence.protocol.Request";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  int32 fieldCode = 1;
  repeated string values = 2;
}

message UserSearchMessage {
  option (scalapb.message).extends = "convergence.protocol.Request";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  repeated int32 fieldCodes = 1;
  string value = 2;
  google.protobuf.Int32Value offset = 3;
  google.protobuf.Int32Value limit = 4;
  google.protobuf.Int32Value orderFieldCode = 5;
  google.protobuf.Int32Value sortCode = 6;

}

message DomainUserData {
  string userType = 1;
  string username = 2;
  google.protobuf.StringValue firstName = 3;
  google.protobuf.StringValue  lastName = 4;
  google.protobuf.StringValue  displayName = 5;
  google.protobuf.StringValue  email = 6;
}

message UserGroupData {
  string id = 1;
  string description = 2;
  repeated string members = 3;
}

message UserListMessage {
  option (scalapb.message).extends = "convergence.protocol.Response";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  repeated DomainUserData userData = 1;
}

message UserGroupsRequestMessage {
  option (scalapb.message).extends = "convergence.protocol.Request";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  repeated string ids = 1;
}

message UserGroupsResponseMessage {
  option (scalapb.message).extends = "convergence.protocol.Response";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  repeated UserGroupData groupData  = 1;
}

message UserGroupsForUsersRequestMessage {
  option (scalapb.message).extends = "convergence.protocol.Request";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  repeated string usernames = 1;
}

message UserGroupsForUsersResponseMessage {
  option (scalapb.message).extends = "convergence.protocol.Response";
  option (scalapb.message).extends = "convergence.protocol.Identity";

  message UserList {
    repeated string users = 1;
  }
  map<string, UserList> groups = 1;
}
